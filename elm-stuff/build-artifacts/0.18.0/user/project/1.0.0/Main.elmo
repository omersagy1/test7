var _user$project$Main$switchPage = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.currentPage, _user$project$Model$EditorPage) ? _elm_lang$core$Native_Utils.update(
		model,
		{currentPage: _user$project$Model$GamePage}) : _elm_lang$core$Native_Utils.update(
		model,
		{currentPage: _user$project$Model$EditorPage});
};
var _user$project$Main$processRenderQueue = F3(
	function (timedQueue, timePassed, display) {
		var updated = A2(_user$project$TimedQueue$update, timePassed, timedQueue);
		var _p0 = _user$project$TimedQueue$dequeue(updated);
		var m = _p0._0;
		var dequeued = _p0._1;
		var _p1 = m;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: dequeued, _1: display};
		} else {
			return {
				ctor: '_Tuple2',
				_0: dequeued,
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					display,
					{
						ctor: '::',
						_0: _p1._0,
						_1: {ctor: '[]'}
					})
			};
		}
	});
var _user$project$Main$enqueueMessage = F2(
	function (q, m) {
		return A3(_user$project$TimedQueue$enqueue, m, 1 * _elm_lang$core$Time$second, q);
	});
var _user$project$Main$gameLoop = F2(
	function (model, timePassed) {
		if (model.paused) {
			return model;
		} else {
			var _p2 = A3(_user$project$Main$processRenderQueue, model.renderQueue, timePassed, model.display);
			var nextRenderQueue = _p2._0;
			var nextDisplay = _p2._1;
			return _elm_lang$core$Native_Utils.update(
				model,
				{gameTime: model.gameTime + timePassed, renderQueue: nextRenderQueue, display: nextDisplay});
		}
	});
var _user$project$Main$updateEditor = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'UpdateTime':
				return A2(_user$project$Main$gameLoop, model, _p3._0);
			case 'AddText':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						corpus: A2(
							_elm_lang$core$Basics_ops['++'],
							model.corpus,
							{
								ctor: '::',
								_0: model.textDraft,
								_1: {ctor: '[]'}
							}),
						textDraft: '',
						renderQueue: A2(_user$project$Main$enqueueMessage, model.renderQueue, model.textDraft)
					});
			case 'SaveDraft':
				return _elm_lang$core$Native_Utils.update(
					model,
					{textDraft: _p3._0});
			case 'Play':
				return _elm_lang$core$Native_Utils.update(
					model,
					{paused: false});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{paused: true});
		}
	});
var _user$project$Main$updateGame = F2(
	function (msg, model) {
		return model;
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var newModel = function () {
			var _p4 = msg;
			switch (_p4.ctor) {
				case 'EditorMessage':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							editorModel: A2(_user$project$Main$updateEditor, _p4._0, model.editorModel)
						});
				case 'GameMessage':
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							gameModel: A2(_user$project$Main$updateGame, _p4._0, model.gameModel)
						});
				default:
					return _user$project$Main$switchPage(model);
			}
		}();
		return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$Main$subscriptions = function (model) {
	return A2(
		_elm_lang$core$Platform_Sub$map,
		_user$project$Model$EditorMessage,
		_elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Model$UpdateTime));
};
var _user$project$Main$model = {
	currentPage: _user$project$Model$EditorPage,
	editorModel: {
		val: 0,
		corpus: {ctor: '[]'},
		display: {ctor: '[]'},
		textDraft: '',
		gameTime: 0,
		paused: true,
		renderQueue: _user$project$TimedQueue$new
	},
	gameModel: {dummy: 2}
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Render_App$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
